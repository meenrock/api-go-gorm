// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/Meal.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MealService_GetUserBMI_FullMethodName = "/main.MealService/GetUserBMI"
)

// MealServiceClient is the client API for MealService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealServiceClient interface {
	GetUserBMI(ctx context.Context, in *RequestUserTime, opts ...grpc.CallOption) (*ResponseBMI, error)
}

type mealServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMealServiceClient(cc grpc.ClientConnInterface) MealServiceClient {
	return &mealServiceClient{cc}
}

func (c *mealServiceClient) GetUserBMI(ctx context.Context, in *RequestUserTime, opts ...grpc.CallOption) (*ResponseBMI, error) {
	out := new(ResponseBMI)
	err := c.cc.Invoke(ctx, MealService_GetUserBMI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealServiceServer is the server API for MealService service.
// All implementations must embed UnimplementedMealServiceServer
// for forward compatibility
type MealServiceServer interface {
	GetUserBMI(context.Context, *RequestUserTime) (*ResponseBMI, error)
	mustEmbedUnimplementedMealServiceServer()
}

// UnimplementedMealServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMealServiceServer struct {
}

func (UnimplementedMealServiceServer) GetUserBMI(context.Context, *RequestUserTime) (*ResponseBMI, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBMI not implemented")
}
func (UnimplementedMealServiceServer) mustEmbedUnimplementedMealServiceServer() {}

// UnsafeMealServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealServiceServer will
// result in compilation errors.
type UnsafeMealServiceServer interface {
	mustEmbedUnimplementedMealServiceServer()
}

func RegisterMealServiceServer(s grpc.ServiceRegistrar, srv MealServiceServer) {
	s.RegisterService(&MealService_ServiceDesc, srv)
}

func _MealService_GetUserBMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUserTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealServiceServer).GetUserBMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealService_GetUserBMI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealServiceServer).GetUserBMI(ctx, req.(*RequestUserTime))
	}
	return interceptor(ctx, in, info, handler)
}

// MealService_ServiceDesc is the grpc.ServiceDesc for MealService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.MealService",
	HandlerType: (*MealServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserBMI",
			Handler:    _MealService_GetUserBMI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Meal.proto",
}
